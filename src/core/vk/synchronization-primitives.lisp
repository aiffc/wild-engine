(in-package :%wild-engine.core.vk)

(defun vk->init-synchronization-primitives (sys)
  (declare (optimize (speed 3) (debug 0) (safety 0)))
  (we.dbg:msg :app "create synchronization primitives : ->~%")
  (progn
    (set-fences sys
		(mapcar #'(lambda (cmd)
		       (declare (ignore cmd))
		       (let ((fence (vk:create-fence (get-device sys) (vk:make-fence-create-info :flags :signaled))))
			 (we.dbg:msg :app "~2tcreate fence [~a]~%" fence)
			 fence))
		   (get-cmds-graphics sys)))
    (set-present-complete sys (vk:create-semaphore (get-device sys) (vk:make-semaphore-create-info)))
    (set-render-complete sys (vk:create-semaphore (get-device sys) (vk:make-semaphore-create-info))))
  (we.dbg:msg :app "~2tcreate present semaphore [~a]~%" (get-present-complete sys))
  (we.dbg:msg :app "~2tcreate render semaphore [~a]~%" (get-render-complete sys)))

(defun vk->destroy-synchronization-primitives (sys)
  (declare (optimize (speed 3) (debug 0) (safety 0)))
  (we.dbg:msg :app "destroy fences : ->~%")
  (when (get-fences sys)
    (mapcar (lambda (fence)
	 (we.dbg:msg :app "~2tdestroy fence [~a]~%" fence)
	 (vk:destroy-fence (get-device sys) fence))
       (get-fences sys))
    (set-fences sys nil))
  (when (get-present-complete sys)
    (we.dbg:msg :app "~2tdestroy present semaphore [~a]~%" (get-present-complete sys))
    (vk:destroy-semaphore (get-device sys) (get-present-complete sys))
    (set-present-complete sys nil))
  (when (get-render-complete sys)
    (we.dbg:msg :app "~2tdestroy render semaphore [~a]~%" (get-render-complete sys))
    (vk:destroy-semaphore (get-device sys) (get-render-complete sys))
    (set-render-complete sys nil)))
