(in-package :%wild-engine.core.model)

(defun load-model (path)
  (let* ((model (ai:import-into-lisp path :processing-flags '(:ai-process-validate-data-structure
							      :ai-process-preset-target-realtime-quality)))
	 (meshs (aref (ai:meshes model) 0))
	 (vertices (ai:vertices meshs))
	 (tcoords (aref (ai:texture-coords meshs) 0))
	 (faces (ai:faces meshs))
	 (ret (make-array (* 3 (length faces)) :fill-pointer 0 :adjustable t)))
    (loop :for face :across faces
	  :for tex-index :from 0 :below (length faces)
	  :for v0 := (aref vertices (aref face 0))
	  :for v1 := (aref vertices (aref face 1))
	  :for v2 := (aref vertices (aref face 2))
	  :for t0 := (aref tcoords (aref face 0))
	  :for t1 := (aref tcoords (aref face 1))
	  :for t2 := (aref tcoords (aref face 2))
	  :for nt0 := (vector (aref t0 0) (- 1.0 (aref t0 1)))
	  :for nt1 := (vector (aref t1 0) (- 1.0 (aref t1 1)))
	  :for nt2 := (vector (aref t2 0) (- 1.0 (aref t2 1)))
	  :do (progn
		(vector-push-extend (%we.vk:make-vertex :v v0 :vt nt0 :vn #(1.0 1.0 1.0)) ret)
		(vector-push-extend (%we.vk:make-vertex :v v1 :vt nt1 :vn #(1.0 1.0 1.0)) ret)
		(vector-push-extend (%we.vk:make-vertex :v v2 :vt nt2 :vn #(1.0 1.0 1.0)) ret))
	  :finally (return-from load-model ret))))
